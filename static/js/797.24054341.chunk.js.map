{"version":3,"file":"static/js/797.24054341.chunk.js","mappings":"oKAkBA,IAhByB,SAAC,GAAgB,IAAdA,EAAa,EAAbA,OACpBC,GAAWC,EAAAA,EAAAA,MAEjB,OACE,8BACGF,EAAOG,KAAI,SAAAC,GAAI,OACd,yBACE,SAAC,KAAD,CAAMC,GAAE,kBAAaD,EAAKE,IAAMC,MAAO,CAAEC,KAAMP,GAA/C,SACGG,EAAKK,SAFDL,EAAKE,GADA,KASrB,C,kICmDD,UA7DmB,WAAO,IAAD,EACvB,GAA4BI,EAAAA,EAAAA,UAAS,IAArC,eAAOV,EAAP,KAAeW,EAAf,KACA,GAAsCC,EAAAA,EAAAA,MAAtC,eAAOC,EAAP,KAAoBC,EAApB,KACMC,EAAa,UAAGF,EAAYG,IAAI,iBAAnB,QAAgC,GAkCnD,OArBAC,EAAAA,EAAAA,YAAU,WACR,GAAsB,KAAlBF,EAAJ,CAIAG,EAAAA,GAAAA,QAAc,mBAAoB,CAAEC,SAAU,MAC9C,IAAMC,EAAI,iBAAaL,GAGvBM,YAAU,iBAAC,kHAEkCC,EAAAA,EAAAA,GAJ/B,gBAIqDF,GAFxD,gBAECG,EAFD,EAECA,QAASC,EAFV,EAEUA,cACjBN,EAAAA,GAAAA,QAAA,4BAAmCM,EAAnC,aACAb,GAAU,OAAIY,IAJP,kDAMPE,QAAQC,KAAR,MACAR,EAAAA,GAAAA,MAAY,iCAPL,0DASR,IAfF,CAgBF,GAAE,CAACH,KAGF,4BACqB,KAAlBA,IAAwB,0DACzB,kBAAMY,SAnCa,SAAAC,GACrBA,EAAEC,iBACF,IAAMC,EAAYF,EAAEG,OAAOC,SAASC,OAAOC,MAEzB,KAAdJ,EAIJhB,EAAe,CAAEmB,OAAQH,IAHvBZ,EAAAA,GAAAA,MAAY,8BAIf,EA0BG,WACE,kBACEiB,KAAK,OACLC,KAAK,SACLC,WAAS,EACTC,YAAY,mBAEd,mBAAQH,KAAK,SAAb,uBAEF,kBACCnC,IAAW,KACV,8BACE,yBACE,SAAC,IAAD,CAAkBA,OAAQA,UAMrC,C,8FC9DDuC,EAAAA,EAAAA,SAAAA,QAAyB,+BAElB,IAAMjB,EAAc,mCAAG,WAAOkB,EAAOpB,GAAd,uFACLmB,EAAAA,EAAAA,IAAA,UAAaC,EAAb,oBAJT,oCAIS,cAAwCpB,QAAxC,IAAwCA,EAAAA,EAAQ,KAD3C,cACtBqB,EADsB,yBAErBA,EAASC,MAFY,2CAAH,uD","sources":["components/SearchMoviesList/SearchMoviesList.jsx","pages/MoviesPage.jsx","services/api.js"],"sourcesContent":["import { Link, useLocation } from 'react-router-dom';\n\nconst SearchMoviesList = ({ movies }) => {\n  const location = useLocation();\n\n  return (\n    <>\n      {movies.map(film => (\n        <li key={film.id}>\n          <Link to={`/movies/${film.id}`} state={{ from: location }}>\n            {film.title}\n          </Link>\n        </li>\n      ))}\n    </>\n  );\n};\n\nexport default SearchMoviesList;\n","import SearchMoviesList from 'components/SearchMoviesList/SearchMoviesList';\nimport { useState, useEffect } from 'react';\nimport { toast } from 'react-hot-toast';\nimport { useSearchParams } from 'react-router-dom';\nimport { fetchMovieInfo } from 'services/api';\n\nconst MoviesPage = () => {\n  const [movies, setMovies] = useState([]);\n  const [searchQuery, setSearchQuery] = useSearchParams();\n  const currentSearch = searchQuery.get('search') ?? '';\n\n  const onChangeSearch = e => {\n    e.preventDefault();\n    const newSearch = e.target.elements.search.value;\n\n    if (newSearch === '') {\n      toast.error('You must enter some text...');\n      return;\n    }\n    setSearchQuery({ search: newSearch });\n  };\n\n  useEffect(() => {\n    if (currentSearch === '') {\n      return;\n    }\n\n    toast.loading('Wait a minute...', { duration: 700 });\n    const some = `&query=${currentSearch}`;\n    const route = '/search/movie';\n\n    setTimeout(async () => {\n      try {\n        const { results, total_results } = await fetchMovieInfo(route, some);\n        toast.success(`Yeah! We've found ${total_results} movies!`);\n        setMovies([...results]);\n      } catch (error) {\n        console.warn(error);\n        toast.error('Oops! Something went wrong...');\n      }\n    }, 800);\n  }, [currentSearch]);\n\n  return (\n    <main>\n      {currentSearch === '' && <h2>Ok! Let's find some movie...</h2>}\n      <form onSubmit={onChangeSearch}>\n        <input\n          type=\"text\"\n          name=\"search\"\n          autoFocus\n          placeholder=\"Search movies\"\n        />\n        <button type=\"submit\">Go on</button>\n      </form>\n      <hr />\n      {movies !== [] && (\n        <section>\n          <ul>\n            <SearchMoviesList movies={movies} />\n          </ul>\n        </section>\n      )}\n    </main>\n  );\n};\n\nexport default MoviesPage;\n","import axios from 'axios';\n\nconst API_KEY = 'daca860db741facb25da0efbe03487a5';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\nexport const fetchMovieInfo = async (route, some) => {\n  const response = await axios.get(`${route}?api_key=${API_KEY}${some ?? ''}`);\n  return response.data;\n};\n"],"names":["movies","location","useLocation","map","film","to","id","state","from","title","useState","setMovies","useSearchParams","searchQuery","setSearchQuery","currentSearch","get","useEffect","toast","duration","some","setTimeout","fetchMovieInfo","results","total_results","console","warn","onSubmit","e","preventDefault","newSearch","target","elements","search","value","type","name","autoFocus","placeholder","axios","route","response","data"],"sourceRoot":""}